// auto-generated by bsg_ascii_to_rom.py from /mnt/users/ssd2/homes/gaozihou/gf12_bond_diagram/bsg_designs/toplevels/bsg_ac_black_parrot_quad_core_wip/testing/traces/bsg_tag_boot.tr; do not modify
module bsg_tag_boot_rom #(parameter width_p=-1, addr_width_p=-1)
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // # PRO-TIP: Set editior syntax to bash (or sh)
                                 // ################################################################################
                                 // # DESIGN SPECIFIC TAG INFO
                                 // #
                                 // # Number | Description            | Width
                                 // # -------+------------------------+-------
                                 // #     0  | Clkgen Async Reset     | 1-bit
                                 // #   3-1  | Clkgen Oscillator      | 5-bits
                                 // #   6-4  | Clkgen Osc Trigger     | 1-bit
                                 // #   9-7  | Clkgen Downsampoler    | 7-bits
                                 // # 12-10  | Clkgen Clock Select    | 2-bits
                                 // #    13  | Prev Link IO Control   | 3-bits
                                 // #    14  | Prev Link CORE Control | 2-bits
                                 // #    15  | Prev CT CORE Control   | 2-bits
                                 // #    16  | Next Link IO Control   | 3-bits
                                 // #    17  | Next Link CORE Control | 2-bits
                                 // #    18  | Next CT CORE Control   | 2-bits
                                 // # 35-19  | Router Control         | 9-bits
                                 // #    36  | CFG  Control           | 9-bits
                                 // #    37  | Core Control           | 9-bits
                                 // #
                                 // # Number of masters = 2
                                 // # Number of clients = 38
                                 // # Max data width = 9
                                 // #
                                 // # Packet lengths
                                 // # <4b>___<2b>___<6b>_1b_<4b>___<9b>
                                 // # <4b>___<22b>
                                 // #
                                 // # There are 2 masters (ASIC and GW) but they are replicated systems. The lsb of
                                 // # the masterEn is the ASIC and the msb is the GW. The GW will be given WHID 0,0
                                 // # and the ASIC will be given WHID 1,0. Therefore, we want to keep the prev link
                                 // # of the GW in reset and the next link of the ASIC in reset.
                                 // #
                                 // ################################################################################
                                 // # Tag Trace Replay Packet Format
                                 // #
                                 // # M = number of masters
                                 // # N = max(1, clog2(#_of_tag_clients))
                                 // # D = max(client_1_width, client_2_width, ..., client_n_width)
                                 // # L = clog2(D+1)
                                 // #
                                 // # |<    4-bits    >|< M-bits >|< N-bits >|<     1-bit    >|< L-bits >|< D-bits >|
                                 // # +----------------+----------+----------+----------------+----------+----------+
                                 // # | replay command | masterEn |  nodeID  | data_not_reset |  length  |   data   |
                                 // # +----------------+----------+----------+----------------+----------+----------+
                                 // #
                                 // # Replay Commands
                                 // #   0 = 0000 = Wait a cycle
                                 // #   1 = 0001 = Send data
                                 // #   2 = 0010 = Receive data
                                 // #   3 = 0011 = Assert done_o ouput signal
                                 // #   4 = 0100 = End test (calls $finish)
                                 // #   5 = 0101 = Wait for cycle_counter == 0
                                 // #   6 = 0110 = Initialize cycle_counter with a 16 bit number
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG MASTER
                                 // #
                                 // # First, we must reset the bsg_tag_master. To do this, we send a 1, then we
                                 // # send a bunch of 0's! By a bunch, the exact amount is (2^clog2(N+1+L+D))+1
                                 // # Send a full 0 packet to all masters
         0: data_o = width_p ' (26'b0001___11___000000_0_0000___000000000); // 0x0700000
                                 // # Wait ~32 cycles
         1: data_o = width_p ' (26'b0110___0000000000000000100000); // 0x1800020
         2: data_o = width_p ' (26'b0101___0000000000000000000000); // 0x1400000
                                 // ################################################################################
                                 // #  ___  ___   ___ _____ ___ _____ ___    _   ___    ___ _    _  _____ ___ _  _
                                 // # | _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \  / __| |  | |/ / __| __| \| |
                                 // # | _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/ | (__| |__| ' < (_ | _|| .` |
                                 // # |___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|    \___|____|_|\_\___|___|_|\_|
                                 // #
                                 // ################################################################################
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG CLIENTS
                                 // #
                                 // # Next, we should reset each client node. To do this we send a packet
                                 // # that has all 1's for data, and has data_not_reset=0. The nodeID should
                                 // # be the ID of the client we are reseting, and length should be the
                                 // # corrent length of the packet. We should send this packet to each client.
                                 // #SEND  en   id=0   r l=1
         3: data_o = width_p ' (26'b0001___01___000000_0_0001___000000001); // 0x0500201
                                 // #SEND  en   id=1   r l=5
         4: data_o = width_p ' (26'b0001___01___000001_0_0101___000011111); // 0x0504A1F
                                 // #SEND  en   id=2   r l=5
         5: data_o = width_p ' (26'b0001___01___000010_0_0101___000011111); // 0x0508A1F
                                 // #SEND  en   id=3   r l=5
         6: data_o = width_p ' (26'b0001___01___000011_0_0101___000011111); // 0x050CA1F
                                 // #SEND  en   id=4   r l=1
         7: data_o = width_p ' (26'b0001___01___000100_0_0001___000000001); // 0x0510201
                                 // #SEND  en   id=5   r l=1
         8: data_o = width_p ' (26'b0001___01___000101_0_0001___000000001); // 0x0514201
                                 // #SEND  en   id=6   r l=1
         9: data_o = width_p ' (26'b0001___01___000110_0_0001___000000001); // 0x0518201
                                 // #SEND  en   id=7   r l=7
        10: data_o = width_p ' (26'b0001___01___000111_0_0111___001111111); // 0x051CE7F
                                 // #SEND  en   id=8   r l=7
        11: data_o = width_p ' (26'b0001___01___001000_0_0111___001111111); // 0x0520E7F
                                 // #SEND  en   id=9   r l=7
        12: data_o = width_p ' (26'b0001___01___001001_0_0111___001111111); // 0x0524E7F
                                 // #SEND  en   id=10  r l=2
        13: data_o = width_p ' (26'b0001___01___001010_0_0010___000000011); // 0x0528403
                                 // #SEND  en   id=11  r l=2
        14: data_o = width_p ' (26'b0001___01___001011_0_0010___000000011); // 0x052C403
                                 // #SEND  en   id=12  r l=2
        15: data_o = width_p ' (26'b0001___01___001100_0_0010___000000011); // 0x0530403
                                 // ################################################################################
                                 // #
                                 // # START CONFIGURATION
                                 // #
                                 // # The bsg tag network is now live! We can begin our configuration.
                                 // #   ### Set osc triggers low
                                 // #
                                 // #   #SEND  en   id=4   d l=1   {trigger}
                                 // #   0001___01___000100_1_0001___000000000
                                 // #   #SEND  en   id=5   d l=1   {trigger}
                                 // #   0001___01___000101_1_0001___000000000
                                 // #   #SEND  en   id=6   d l=1   {trigger}
                                 // #   0001___01___000110_1_0001___000000000
                                 // #
                                 // #   ### Program the raw oscillators speed
                                 // #
                                 // #   #SEND  en   id=1   d l=5   {adt, cdt, fdt}
                                 // #   0001___01___000001_1_0101___000000000
                                 // #   #SEND  en   id=2   d l=5   {adt, cdt, fdt}
                                 // #   0001___01___000010_1_0101___000000000
                                 // #   #SEND  en   id=3   d l=5   {adt, cdt, fdt}
                                 // #   0001___01___000011_1_0101___000000000
                                 // #
                                 // #   ### Trigger oscillators
                                 // #
                                 // #   #SEND  en   id=4   d l=1   {trigger}
                                 // #   0001___01___000100_1_0001___000000001
                                 // #   0001___01___000100_1_0001___000000000
                                 // #   #SEND  en   id=5   d l=1   {trigger}
                                 // #   0001___01___000101_1_0001___000000001
                                 // #   0001___01___000101_1_0001___000000000
                                 // #   #SEND  en   id=6   d l=1   {trigger}
                                 // #   0001___01___000110_1_0001___000000001
                                 // #   0001___01___000110_1_0001___000000000
                                 // #
                                 // #   ### Async clk-gen reset to get things moving
                                 // #
                                 // #   #SEND  en   id=0   d l=1   {async_reset}
                                 // #   0001___01___000000_1_0001___000000000
                                 // #   0001___01___000000_1_0001___000000001
                                 // #   0001___01___000000_1_0001___000000000
                                 // #
                                 // #   ### Set downsamples and reset
                                 // #
                                 // #   #SEND  en   id=7 d l=7   {ds_val, reset}
                                 // #   0001___01___000111_1_0111___000000001
                                 // #   0001___01___000111_1_0111___000000000
                                 // #   #SEND  en   id=8  d l=7   {ds_val, reset}
                                 // #   0001___01___001000_1_0111___000000001
                                 // #   0001___01___001000_1_0111___000000000
                                 // #   #SEND  en   id=9  d l=7   {ds_val, reset}
                                 // #   0001___01___001001_1_0111___000000001
                                 // #   0001___01___001001_1_0111___000000000
                                 // #
                                 // #   ### Select the output clock (0=raw osc, 1=ds osc, 2=ext, 3=off)
                                 // #
                                 // #   #SEND  en   id=10 d l=2   {clk_select}
                                 // #   0001___01___001010_1_0010___000000001
                                 // #   #SEND  en   id=11 d l=2   {clk_select}
                                 // #   0001___01___001011_1_0010___000000001
                                 // #   #SEND  en   id=12 d l=2   {clk_select}
                                 // #   0001___01___001100_1_0010___000000001
                                 // ### Select the output clock (0=raw osc, 1=ds osc, 2=ext, 3=off)
                                 // #SEND  en   id=10 d l=2   {clk_select}
        16: data_o = width_p ' (26'b0001___01___001010_1_0010___000000010); // 0x052A402
                                 // #SEND  en   id=11 d l=2   {clk_select}
        17: data_o = width_p ' (26'b0001___01___001011_1_0010___000000010); // 0x052E402
                                 // #SEND  en   id=12 d l=2   {clk_select}
        18: data_o = width_p ' (26'b0001___01___001100_1_0010___000000010); // 0x0532402
                                 // ################################################################################
                                 // #  ___  ___   ___ _____ ___ _____ ___    _   ___   ___ ___     ___ ___  __  __ ___ _    _____  __
                                 // # | _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \ |_ _/ _ \   / __/ _ \|  \/  | _ \ |  | __\ \/ /
                                 // # | _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/  | | (_) | | (_| (_) | |\/| |  _/ |__| _| >  <
                                 // # |___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|   |___\___/   \___\___/|_|  |_|_| |____|___/_/\_\
                                 // #
                                 // ################################################################################
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG CLIENTS
                                 // #
                                 // # Next, we should reset each client node. To do this we send a packet
                                 // # that has all 1's for data, and has data_not_reset=0. The nodeID should
                                 // # be the ID of the client we are reseting, and length should be the
                                 // # corrent length of the packet. We should send this packet to each client.
                                 // #SEND  en   id=13  r l=3
        19: data_o = width_p ' (26'b0001___11___001101_0_0011___000000111); // 0x0734607
                                 // #SEND  en   id=14  r l=2
        20: data_o = width_p ' (26'b0001___11___001110_0_0010___000000011); // 0x0738403
                                 // #SEND  en   id=15  r l=2
        21: data_o = width_p ' (26'b0001___11___001111_0_0010___000000011); // 0x073C403
                                 // #SEND  en   id=16  r l=3
        22: data_o = width_p ' (26'b0001___11___010000_0_0011___000000111); // 0x0740607
                                 // #SEND  en   id=17  r l=2
        23: data_o = width_p ' (26'b0001___11___010001_0_0010___000000011); // 0x0744403
                                 // #SEND  en   id=18  r l=2
        24: data_o = width_p ' (26'b0001___11___010010_0_0010___000000011); // 0x0748403
                                 // #SEND  en   id=19  r l=9
        25: data_o = width_p ' (26'b0001___11___010011_0_1001___111111111); // 0x074D3FF
                                 // #SEND  en   id=20  r l=9
        26: data_o = width_p ' (26'b0001___11___010100_0_1001___111111111); // 0x07513FF
                                 // #SEND  en   id=21  r l=9
        27: data_o = width_p ' (26'b0001___11___010101_0_1001___111111111); // 0x07553FF
                                 // #SEND  en   id=22  r l=9
        28: data_o = width_p ' (26'b0001___11___010110_0_1001___111111111); // 0x07593FF
                                 // #SEND  en   id=23  r l=9
        29: data_o = width_p ' (26'b0001___11___010111_0_1001___111111111); // 0x075D3FF
                                 // #SEND  en   id=24  r l=9
        30: data_o = width_p ' (26'b0001___11___011000_0_1001___111111111); // 0x07613FF
                                 // #SEND  en   id=25  r l=9
        31: data_o = width_p ' (26'b0001___11___011001_0_1001___111111111); // 0x07653FF
                                 // #SEND  en   id=26  r l=9
        32: data_o = width_p ' (26'b0001___11___011010_0_1001___111111111); // 0x07693FF
                                 // #SEND  en   id=27  r l=9
        33: data_o = width_p ' (26'b0001___11___011011_0_1001___111111111); // 0x076D3FF
                                 // #SEND  en   id=28  r l=9
        34: data_o = width_p ' (26'b0001___11___011100_0_1001___111111111); // 0x07713FF
                                 // #SEND  en   id=29  r l=9
        35: data_o = width_p ' (26'b0001___11___011101_0_1001___111111111); // 0x07753FF
                                 // #SEND  en   id=30  r l=9
        36: data_o = width_p ' (26'b0001___11___011110_0_1001___111111111); // 0x07793FF
                                 // #SEND  en   id=31  r l=9
        37: data_o = width_p ' (26'b0001___11___011111_0_1001___111111111); // 0x077D3FF
                                 // #SEND  en   id=32  r l=9
        38: data_o = width_p ' (26'b0001___11___100000_0_1001___111111111); // 0x07813FF
                                 // #SEND  en   id=33  r l=9
        39: data_o = width_p ' (26'b0001___11___100001_0_1001___111111111); // 0x07853FF
                                 // #SEND  en   id=34  r l=9
        40: data_o = width_p ' (26'b0001___11___100010_0_1001___111111111); // 0x07893FF
                                 // #SEND  en   id=35  r l=9
        41: data_o = width_p ' (26'b0001___11___100011_0_1001___111111111); // 0x078D3FF
                                 // #SEND  en   id=36  r l=9
        42: data_o = width_p ' (26'b0001___11___100100_0_1001___111111111); // 0x07913FF
                                 // #SEND  en   id=37  r l=9
        43: data_o = width_p ' (26'b0001___11___100101_0_1001___111111111); // 0x07953FF
                                 // ################################################################################
                                 // #
                                 // # START CONFIGURATION
                                 // #
                                 // # The bsg tag network is now live! We can begin our configuration.
                                 // ### STEP 1: INITIALIZE EVERYTHING
                                 // # Reset both ASIC and GW Prev Link IO Control
                                 // #SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        44: data_o = width_p ' (26'b0001___11___001101_1_0011___000000110); // 0x0736606
                                 // # Reset both ASIC and GW Prev Link CORE Control
                                 // #SEND  en   id=14  d l=2   {up_link_reset, down_link_reset}
        45: data_o = width_p ' (26'b0001___11___001110_1_0010___000000011); // 0x073A403
                                 // # Reset both ASIC and GW Prev CT CORE Control
                                 // #SEND  en   id=15  d l=2   {reset, fifo_reset}
        46: data_o = width_p ' (26'b0001___11___001111_1_0010___000000011); // 0x073E403
                                 // # Reset both ASIC and GW Next Link IO Control
                                 // #SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        47: data_o = width_p ' (26'b0001___11___010000_1_0011___000000110); // 0x0742606
                                 // # Reset both ASIC and GW Next Link CORE Control
                                 // #SEND  en   id=17  d l=2   {up_link_reset, down_link_reset}
        48: data_o = width_p ' (26'b0001___11___010001_1_0010___000000011); // 0x0746403
                                 // # Reset both ASIC and GW Next CT CORE Control
                                 // #SEND  en   id=18  d l=2   {reset, fifo_reset}
        49: data_o = width_p ' (26'b0001___11___010010_1_0010___000000011); // 0x074A403
                                 // # Reset ASIC Routers and set cord to i
                                 // #SEND  en   id=19  d l=9   {reset, cord=1}
        50: data_o = width_p ' (26'b0001___01___010011_1_1001___100000001); // 0x054F301
                                 // #SEND  en   id=20  d l=9   {reset, cord=2}
        51: data_o = width_p ' (26'b0001___01___010100_1_1001___100000010); // 0x0553302
                                 // #SEND  en   id=21  d l=9   {reset, cord=3}
        52: data_o = width_p ' (26'b0001___01___010101_1_1001___100000011); // 0x0557303
                                 // #SEND  en   id=22  d l=9   {reset, cord=4}
        53: data_o = width_p ' (26'b0001___01___010110_1_1001___100000100); // 0x055B304
                                 // #SEND  en   id=23  d l=9   {reset, cord=5}
        54: data_o = width_p ' (26'b0001___01___010111_1_1001___100000101); // 0x055F305
                                 // # Reset GW Router Control and set cord to 7
                                 // #SEND  en   id=19  d l=9   {reset, cord=7}
        55: data_o = width_p ' (26'b0001___10___010011_1_1001___100000111); // 0x064F307
                                 // # Reset GW BlackParrot CFG and set dest cord to 3 (CLINT)
                                 // #SEND  en   id=36  d l=9   {reset, cord=9}
        56: data_o = width_p ' (26'b0001___10___100100_1_1001___100000011); // 0x0693303
                                 // # Reset ASIC BackParrot Control and set dest cord to 7 (DRAM)
                                 // #SEND  en   id=37 d l=9   {reset, cord=7}
        57: data_o = width_p ' (26'b0001___01___100101_1_1001___100000111); // 0x0597307
                                 // # Reset GW BlackParrot Control and set dest cord to 7 (DRAM)
                                 // #SEND  en   id=37 d l=9   {reset, cord=7}
        58: data_o = width_p ' (26'b0001___10___100101_1_1001___100000111); // 0x0697307
                                 // ### STEP 2: Perform async token resets
                                 // # Async token reset for GW Prev IO Link
                                 // #SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        59: data_o = width_p ' (26'b0001___10___001101_1_0011___000000111); // 0x0636607
        60: data_o = width_p ' (26'b0001___10___001101_1_0011___000000110); // 0x0636606
                                 // # Assert async token reset for ASIC Next IO Link
                                 // #SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        61: data_o = width_p ' (26'b0001___01___010000_1_0011___000000111); // 0x0542607
        62: data_o = width_p ' (26'b0001___01___010000_1_0011___000000110); // 0x0542606
                                 // ### STEP 3: De-assert Upstream IO Links reset
                                 // # De-assert upstream reset for GW Prev IO Link
                                 // #SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        63: data_o = width_p ' (26'b0001___10___001101_1_0011___000000010); // 0x0636602
                                 // # De-assert upstream reset for ASIC Next IO Link
                                 // #SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        64: data_o = width_p ' (26'b0001___01___010000_1_0011___000000010); // 0x0542602
                                 // ### STEP 4: De-assert Downstream IO Links reset
                                 // # De-assert downstream reset for GW Prev IO Link
                                 // #SEND  en   id=13  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        65: data_o = width_p ' (26'b0001___10___001101_1_0011___000000000); // 0x0636600
                                 // # De-assert downstream reset for ASIC Next IO Link
                                 // #SEND  en   id=16  d l=3   {up_link_reset, down_link_reset, async_token_reset}
        66: data_o = width_p ' (26'b0001___01___010000_1_0011___000000000); // 0x0542600
                                 // ### STEP 5/6: De-assert Upstream/Downstream CORE Links reset
                                 // # De-assert upstream/downstream reset for GW Prev CORE Link
                                 // #SEND  en   id=14  d l=2   {up_link_reset, down_link_reset}
        67: data_o = width_p ' (26'b0001___10___001110_1_0010___000000000); // 0x063A400
                                 // # De-assert upstream/downstream reset for ASIC Next CORE Link
                                 // #SEND  en   id=17  d l=2   {up_link_reset, down_link_reset}
        68: data_o = width_p ' (26'b0001___01___010001_1_0010___000000000); // 0x0546400
                                 // ### STEP 7: De-assert CT reset and fifo reset
                                 // # De-assert reset and fifo_reset for GW Prev CT CORE Control
                                 // #SEND  en   id=15  d l=2   {reset, fifo_reset}
        69: data_o = width_p ' (26'b0001___10___001111_1_0010___000000000); // 0x063E400
                                 // # De-assert reset and fifo_reset for ASIC Next CT CORE Control
                                 // #SEND  en   id=18  d l=2   {reset, fifo_reset}
        70: data_o = width_p ' (26'b0001___01___010010_1_0010___000000000); // 0x054A400
                                 // ### STEP 8: De-assert Router reset
                                 // # Deassert reset ASIC Routers and set cord to i
                                 // #SEND  en   id=19  d l=9   {reset, cord=1}
        71: data_o = width_p ' (26'b0001___01___010011_1_1001___000000001); // 0x054F201
                                 // #SEND  en   id=20  d l=9   {reset, cord=2}
        72: data_o = width_p ' (26'b0001___01___010100_1_1001___000000010); // 0x0553202
                                 // #SEND  en   id=21  d l=9   {reset, cord=3}
        73: data_o = width_p ' (26'b0001___01___010101_1_1001___000000011); // 0x0557203
                                 // #SEND  en   id=22  d l=9   {reset, cord=4}
        74: data_o = width_p ' (26'b0001___01___010110_1_1001___000000100); // 0x055B204
                                 // #SEND  en   id=23  d l=9   {reset, cord=5}
        75: data_o = width_p ' (26'b0001___01___010111_1_1001___000000101); // 0x055F205
        76: data_o = width_p ' (26'b0001___01___011110_1_1001___000001100); // 0x057B20C
                                 // # Deassert reset GW Router Control and set cord to 7
                                 // #SEND  en   id=19  d l=9   {reset, cord=7}
        77: data_o = width_p ' (26'b0001___10___010011_1_1001___000000111); // 0x064F207
                                 // # Deassert reset GW BlackParrot CFG and set dest cord to 3 (CLINT)
                                 // #SEND  en   id=36  d l=9   {reset, cord=9}
        78: data_o = width_p ' (26'b0001___10___100100_1_1001___000000011); // 0x0693203
                                 // # Deassert reset ASIC BackParrot Control and set dest cord to 7 (DRAM)
                                 // #SEND  en   id=37 d l=9   {reset, cord=7}
        79: data_o = width_p ' (26'b0001___01___100101_1_1001___000000111); // 0x0597207
                                 // # Deassert reset GW BlackParrot Control and set dest cord to 7 (DRAM)
                                 // #SEND  en   id=37 d l=9   {reset, cord=7}
        80: data_o = width_p ' (26'b0001___10___100101_1_1001___000000111); // 0x0697207
                                 // ################################################################################
                                 // #
                                 // # Done!
                                 // #
                                 // # Configuration is complete and we are out of reset. We should indicate we are
                                 // # done to allow the next part of the testbench to come alive.
                                 // # Assert done_o
        81: data_o = width_p ' (26'b0011___0000000000000000000000); // 0x0C00000
   default: data_o = 'X;
endcase
endmodule
