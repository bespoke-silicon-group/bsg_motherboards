// auto-generated by bsg_ascii_to_rom.py from /mnt/users/ssd2/homes/gaozihou/gf12_bond_diagram/bsg_designs/toplevels/bsg_ac_manycore_fpu_rc3/testing/traces/bsg_tag_boot.tr; do not modify
module bsg_tag_boot_rom #(parameter width_p=-1, addr_width_p=-1)
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // # PRO-TIP: Set editior syntax to bash (or sh)
                                 // ################################################################################
                                 // # DESIGN SPECIFIC TAG INFO
                                 // #
                                 // # ASIC TAG INFO
                                 // #
                                 // # Number | Description            | Width
                                 // # -------+------------------------+-------
                                 // #     0  | Clkgen Async Reset     | 1-bit
                                 // #   3-1  | Clkgen Oscillator      | 5-bits
                                 // #   6-4  | Clkgen Osc Trigger     | 1-bit
                                 // #   9-7  | Clkgen Downsampoler    | 7-bits
                                 // # 12-10  | Clkgen Clock Select    | 2-bits
                                 // #    13  | Prev Link IO Control   | 3-bits
                                 // #    14  | Prev Link CORE Control | 2-bits
                                 // #    15  | Prev CT CORE Control   | 2-bits
                                 // #    16  | Next Link IO Control   | 3-bits
                                 // #    17  | Next Link CORE Control | 2-bits
                                 // #    18  | Next CT CORE Control   | 2-bits
                                 // #    19  | Manycore Control       | 5-bits
                                 // #    20  | Vcache Control         |10-bits
                                 // #    21  | Network_a Control      | 5-bits
                                 // # 22- ?* | Network_b control      |10-bits
                                 // # ? -33  | Unused                 | N/A
                                 // #
                                 // #
                                 // # GATEWAY TAG INFO
                                 // #
                                 // # Number | Description            | Width
                                 // # -------+------------------------+-------
                                 // #    13  | Prev Link IO Control   | 3-bits
                                 // #    14  | Prev Link CORE Control | 2-bits
                                 // #    15  | Prev CT CORE Control   | 2-bits
                                 // #    16  | Next Link IO Control   | 3-bits
                                 // #    17  | Next Link CORE Control | 2-bits
                                 // #    18  | Next CT CORE Control   | 2-bits
                                 // #    19  | IC0 Manycore Control   | 5-bits
                                 // #    20  | IC0 Vcache Control     |10-bits
                                 // #    21  | IC0 Network_a Control  | 5-bits
                                 // #    22  | IC0 Network_b control  |10-bits
                                 // #    23  | IC1 Manycore Control   | 5-bits
                                 // #    24  | IC1 Vcache Control     |10-bits
                                 // #    25  | IC1 Network_a Control  | 5-bits
                                 // #    26  | IC1 Network_b control  |10-bits
                                 // # 27-33  | Unused                 | N/A
                                 // #
                                 // # *:  Depends on number of Vcache on ASIC (?=22+num_cache-1)
                                 // #
                                 // # Number of masters = 3
                                 // # Number of clients = 34
                                 // # Max data width    = 10
                                 // #
                                 // # Packet lengths
                                 // # <4b>___<3b>___<6b>_1b_<4b>___<10b>
                                 // # <4b>___<24b>
                                 // #
                                 // # There are 3 masters (GW, IC0 and IC1) but they are replicated systems. The lsb of
                                 // # the masterEn is the GW and high bits are IC0/IC1. Wormhole ID is growing from GW
                                 // # to IC1, so GW is on prev_link side and IC1 is on next_link side.
                                 // #
                                 // ################################################################################
                                 // # Tag Trace Replay Packet Format
                                 // #
                                 // # M = number of masters
                                 // # N = max(1, clog2(#_of_tag_clients))
                                 // # D = max(client_1_width, client_2_width, ..., client_n_width)
                                 // # L = clog2(D+1)
                                 // #
                                 // # |<    4-bits    >|< M-bits >|< N-bits >|<     1-bit    >|< L-bits >|< D-bits >|
                                 // # +----------------+----------+----------+----------------+----------+----------+
                                 // # | replay command | masterEn |  nodeID  | data_not_reset |  length  |   data   |
                                 // # +----------------+----------+----------+----------------+----------+----------+
                                 // #
                                 // # Replay Commands
                                 // #   0 = 0000 = Wait a cycle
                                 // #   1 = 0001 = Send data
                                 // #   2 = 0010 = Receive data
                                 // #   3 = 0011 = Assert done_o ouput signal
                                 // #   4 = 0100 = End test (calls $finish)
                                 // #   5 = 0101 = Wait for cycle_counter == 0
                                 // #   6 = 0110 = Initialize cycle_counter with a 16 bit number
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG MASTER
                                 // #
                                 // # First, we must reset the bsg_tag_master. To do this, we send a 1, then we
                                 // # send a bunch of 0's! By a bunch, the exact amount is (2^clog2(N+1+L+D))+1
                                 // # Send a full 0 packet to all masters
         0: data_o = width_p ' (28'b0001___111___000000_0_0000___0000000000); // 0x1E00000
                                 // # Wait ~32 cycles
         1: data_o = width_p ' (28'b0110___000000000000000000100000); // 0x6000020
         2: data_o = width_p ' (28'b0101___000000000000000000000000); // 0x5000000
                                 // ################################################################################
                                 // #  ___  ___   ___ _____ ___ _____ ___    _   ___    ___ _    _  _____ ___ _  _
                                 // # | _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \  / __| |  | |/ / __| __| \| |
                                 // # | _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/ | (__| |__| ' < (_ | _|| .` |
                                 // # |___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|    \___|____|_|\_\___|___|_|\_|
                                 // #
                                 // ################################################################################
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG CLIENTS
                                 // #
                                 // # Next, we should reset each client node. To do this we send a packet
                                 // # that has all 1's for data, and has data_not_reset=0. The nodeID should
                                 // # be the ID of the client we are reseting, and length should be the
                                 // # corrent length of the packet. We should send this packet to each client.
                                 // #SEND  en   id=0  r l=1
         3: data_o = width_p ' (28'b0001___110___000000_0_0001___0000000001); // 0x1C00401
                                 // #SEND  en   id=1  r l=5
         4: data_o = width_p ' (28'b0001___110___000001_0_0101___0000011111); // 0x1C0941F
                                 // #SEND  en   id=2  r l=5
         5: data_o = width_p ' (28'b0001___110___000010_0_0101___0000011111); // 0x1C1141F
                                 // #SEND  en   id=3  r l=5
         6: data_o = width_p ' (28'b0001___110___000011_0_0101___0000011111); // 0x1C1941F
                                 // #SEND  en   id=4  r l=1
         7: data_o = width_p ' (28'b0001___110___000100_0_0001___0000000001); // 0x1C20401
                                 // #SEND  en   id=5  r l=1
         8: data_o = width_p ' (28'b0001___110___000101_0_0001___0000000001); // 0x1C28401
                                 // #SEND  en   id=6  r l=1
         9: data_o = width_p ' (28'b0001___110___000110_0_0001___0000000001); // 0x1C30401
                                 // #SEND  en   id=7  r l=7
        10: data_o = width_p ' (28'b0001___110___000111_0_0111___0001111111); // 0x1C39C7F
                                 // #SEND  en   id=8  r l=7
        11: data_o = width_p ' (28'b0001___110___001000_0_0111___0001111111); // 0x1C41C7F
                                 // #SEND  en   id=9  r l=7
        12: data_o = width_p ' (28'b0001___110___001001_0_0111___0001111111); // 0x1C49C7F
                                 // #SEND  en   id=10 r l=2
        13: data_o = width_p ' (28'b0001___110___001010_0_0010___0000000011); // 0x1C50803
                                 // #SEND  en   id=11 r l=2
        14: data_o = width_p ' (28'b0001___110___001011_0_0010___0000000011); // 0x1C58803
                                 // #SEND  en   id=12 r l=2
        15: data_o = width_p ' (28'b0001___110___001100_0_0010___0000000011); // 0x1C60803
                                 // ################################################################################
                                 // #
                                 // # START CONFIGURATION
                                 // #
                                 // # The bsg tag network is now live! We can begin our configuration.
                                 // #   ### Set osc triggers low
                                 // #
                                 // #   #SEND  en   id=4  d l=1   {trigger}
                                 // #   0001___110___000100_1_0001___0000000000
                                 // #   #SEND  en   id=5  d l=1   {trigger}
                                 // #   0001___110___000101_1_0001___0000000000
                                 // #   #SEND  en   id=6  d l=1   {trigger}
                                 // #   0001___110___000110_1_0001___0000000000
                                 // #
                                 // #   ### Program the raw oscillators speed
                                 // #
                                 // #   #SEND  en   id=1  d l=5   {adt, cdt, fdt}
                                 // #   0001___110___000001_1_0101___0000000000
                                 // #   #SEND  en   id=2  d l=5   {adt, cdt, fdt}
                                 // #   0001___110___000010_1_0101___0000000000
                                 // #   #SEND  en   id=3  d l=5   {adt, cdt, fdt}
                                 // #   0001___110___000011_1_0101___0000000000
                                 // #
                                 // #   ### Trigger oscillators
                                 // #
                                 // #   #SEND  en   id=4  d l=1   {trigger}
                                 // #   0001___110___000100_1_0001___0000000001
                                 // #   0001___110___000100_1_0001___0000000000
                                 // #   #SEND  en   id=5  d l=1   {trigger}
                                 // #   0001___110___000101_1_0001___0000000001
                                 // #   0001___110___000101_1_0001___0000000000
                                 // #   #SEND  en   id=6  d l=1   {trigger}
                                 // #   0001___110___000110_1_0001___0000000001
                                 // #   0001___110___000110_1_0001___0000000000
                                 // #
                                 // #   ### Async clk-gen reset to get things moving
                                 // #
                                 // #   #SEND  en   id=0  d l=1   {async_reset}
                                 // #   0001___110___000000_1_0001___0000000000
                                 // #   0001___110___000000_1_0001___0000000001
                                 // #   0001___110___000000_1_0001___0000000000
                                 // #
                                 // #   ### Set downsamples and reset
                                 // #
                                 // #   #SEND  en   id=7 d l=7   {ds_val, reset}
                                 // #   0001___110___000111_1_0111___0000000001
                                 // #   0001___110___000111_1_0111___0000000000
                                 // #   #SEND  en   id=8  d l=7   {ds_val, reset}
                                 // #   0001___110___001000_1_0111___0000000001
                                 // #   0001___110___001000_1_0111___0000000000
                                 // #   #SEND  en   id=9  d l=7   {ds_val, reset}
                                 // #   0001___110___001001_1_0111___0000000001
                                 // #   0001___110___001001_1_0111___0000000000
                                 // #
                                 // #   ### Select the output clock (0=raw osc, 1=ds osc, 2=ext, 3=off)
                                 // #
                                 // #   #SEND  en   id=10 d l=2   {clk_select}
                                 // #   0001___110___001010_1_0010___0000000001
                                 // #   #SEND  en   id=11 d l=2   {clk_select}
                                 // #   0001___110___001011_1_0010___0000000001
                                 // #   #SEND  en   id=12 d l=2   {clk_select}
                                 // #   0001___110___001100_1_0010___0000000001
                                 // #SEND  en   id=10 d l=2   {clk_select}
        16: data_o = width_p ' (28'b0001___110___001010_1_0010___0000000010); // 0x1C54802
                                 // #SEND  en   id=11 d l=2   {clk_select}
        17: data_o = width_p ' (28'b0001___110___001011_1_0010___0000000010); // 0x1C5C802
                                 // #SEND  en   id=12 d l=2   {clk_select}
        18: data_o = width_p ' (28'b0001___110___001100_1_0010___0000000010); // 0x1C64802
                                 // ################################################################################
                                 // #  ___  ___   ___ _____ ___ _____ ___    _   ___   ___ ___     ___ ___  __  __ ___ _    _____  __
                                 // # | _ )/ _ \ / _ \_   _/ __|_   _| _ \  /_\ | _ \ |_ _/ _ \   / __/ _ \|  \/  | _ \ |  | __\ \/ /
                                 // # | _ \ (_) | (_) || | \__ \ | | |   / / _ \|  _/  | | (_) | | (_| (_) | |\/| |  _/ |__| _| >  <
                                 // # |___/\___/ \___/ |_| |___/ |_| |_|_\/_/ \_\_|   |___\___/   \___\___/|_|  |_|_| |____|___/_/\_\
                                 // #
                                 // ################################################################################
                                 // ################################################################################
                                 // #
                                 // # RESET BSG TAG CLIENTS
                                 // #
                                 // # Next, we should reset each client node. To do this we send a packet
                                 // # that has all 1's for data, and has data_not_reset=0. The nodeID should
                                 // # be the ID of the client we are reseting, and length should be the
                                 // # corrent length of the packet. We should send this packet to each client.
                                 // #SEND  en   id=13 r l=3
        19: data_o = width_p ' (28'b0001___111___001101_0_0011___0000000111); // 0x1E68C07
                                 // #SEND  en   id=14 r l=2
        20: data_o = width_p ' (28'b0001___111___001110_0_0010___0000000011); // 0x1E70803
                                 // #SEND  en   id=15 r l=2
        21: data_o = width_p ' (28'b0001___111___001111_0_0010___0000000011); // 0x1E78803
                                 // #SEND  en   id=16 r l=3
        22: data_o = width_p ' (28'b0001___111___010000_0_0011___0000000111); // 0x1E80C07
                                 // #SEND  en   id=17 r l=2
        23: data_o = width_p ' (28'b0001___111___010001_0_0010___0000000011); // 0x1E88803
                                 // #SEND  en   id=18 r l=2
        24: data_o = width_p ' (28'b0001___111___010010_0_0010___0000000011); // 0x1E90803
                                 // #SEND  en   id=19 r l=5
        25: data_o = width_p ' (28'b0001___111___010011_0_0101___0000011111); // 0x1E9941F
                                 // #SEND  en   id=20 r l=10
        26: data_o = width_p ' (28'b0001___111___010100_0_1010___1111111111); // 0x1EA2BFF
                                 // #SEND  en   id=21 r l=5
        27: data_o = width_p ' (28'b0001___111___010101_0_0101___0000011111); // 0x1EA941F
                                 // #SEND  en   id=22 r l=10
        28: data_o = width_p ' (28'b0001___111___010110_0_1010___1111111111); // 0x1EB2BFF
                                 // #SEND  en   id=23 r l=10
        29: data_o = width_p ' (28'b0001___111___010111_0_1010___1111111111); // 0x1EBABFF
                                 // #SEND  en   id=24 r l=10
        30: data_o = width_p ' (28'b0001___111___011000_0_1010___1111111111); // 0x1EC2BFF
                                 // #SEND  en   id=25 r l=10
        31: data_o = width_p ' (28'b0001___111___011001_0_1010___1111111111); // 0x1ECABFF
                                 // #SEND  en   id=26 r l=10
        32: data_o = width_p ' (28'b0001___111___011010_0_1010___1111111111); // 0x1ED2BFF
                                 // #SEND  en   id=27 r l=10
        33: data_o = width_p ' (28'b0001___111___011011_0_1010___1111111111); // 0x1EDABFF
                                 // #SEND  en   id=28 r l=10
        34: data_o = width_p ' (28'b0001___111___011100_0_1010___1111111111); // 0x1EE2BFF
                                 // #SEND  en   id=29 r l=10
        35: data_o = width_p ' (28'b0001___111___011101_0_1010___1111111111); // 0x1EEABFF
                                 // #SEND  en   id=30 r l=10
        36: data_o = width_p ' (28'b0001___111___011110_0_1010___1111111111); // 0x1EF2BFF
                                 // #SEND  en   id=31 r l=10
        37: data_o = width_p ' (28'b0001___111___011111_0_1010___1111111111); // 0x1EFABFF
                                 // #SEND  en   id=32 r l=10
        38: data_o = width_p ' (28'b0001___111___100000_0_1010___1111111111); // 0x1F02BFF
                                 // #SEND  en   id=33 r l=10
        39: data_o = width_p ' (28'b0001___111___100001_0_1010___1111111111); // 0x1F0ABFF
                                 // ################################################################################
                                 // #
                                 // # START CONFIGURATION
                                 // #
                                 // # The bsg tag network is now live! We can begin our configuration.
                                 // ### STEP 1: INITIALIZE EVERYTHING
                                 // # Reset both ASIC and GW Prev Link IO Control
                                 // #SEND  en   id=13 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        40: data_o = width_p ' (28'b0001___111___001101_1_0011___0000000110); // 0x1E6CC06
                                 // # Reset both ASIC and GW Prev Link CORE Control
                                 // #SEND  en   id=14 d l=2   {up_link_reset, down_link_reset}
        41: data_o = width_p ' (28'b0001___111___001110_1_0010___0000000011); // 0x1E74803
                                 // # Reset both ASIC and GW Prev CT CORE Control
                                 // #SEND  en   id=15 d l=2   {reset, fifo_reset}
        42: data_o = width_p ' (28'b0001___111___001111_1_0010___0000000011); // 0x1E7C803
                                 // # Reset both ASIC and GW Next Link IO Control
                                 // #SEND  en   id=16 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        43: data_o = width_p ' (28'b0001___111___010000_1_0011___0000000110); // 0x1E84C06
                                 // # Reset both ASIC and GW Next Link CORE Control
                                 // #SEND  en   id=17 d l=2   {up_link_reset, down_link_reset}
        44: data_o = width_p ' (28'b0001___111___010001_1_0010___0000000011); // 0x1E8C803
                                 // # Reset both ASIC and GW Next CT CORE Control
                                 // #SEND  en   id=18 d l=2   {reset, fifo_reset}
        45: data_o = width_p ' (28'b0001___111___010010_1_0010___0000000011); // 0x1E94803
                                 // # Reset ASIC network_a, set cord to 0
                                 // #SEND  en   id=21 d l=5   {reset, cord}
        46: data_o = width_p ' (28'b0001___010___010101_1_0101___0000010000); // 0x14AD410
        47: data_o = width_p ' (28'b0001___100___010101_1_0101___0000010000); // 0x18AD410
                                 // # Reset GW network_a, set cord to 8
                                 // #SEND  en   id=21 d l=5   {reset, cord}
        48: data_o = width_p ' (28'b0001___001___010101_1_0101___0000011000); // 0x12AD418
                                 // #SEND  en   id=25 d l=5   {reset, cord}
        49: data_o = width_p ' (28'b0001___001___011001_1_0101___0000011000); // 0x12CD418
                                 // # Reset ASIC network_b, set cord to i
                                 // #SEND  en   id=22 d l=10   {reset, cord}
        50: data_o = width_p ' (28'b0001___010___010110_1_1010___1000000000); // 0x14B6A00
        51: data_o = width_p ' (28'b0001___100___010110_1_1010___1000000000); // 0x18B6A00
                                 // #SEND  en   id=23 d l=10   {reset, cord}
        52: data_o = width_p ' (28'b0001___010___010111_1_1010___1000000001); // 0x14BEA01
        53: data_o = width_p ' (28'b0001___100___010111_1_1010___1000000001); // 0x18BEA01
                                 // #SEND  en   id=24 d l=10   {reset, cord}
        54: data_o = width_p ' (28'b0001___010___011000_1_1010___1000000010); // 0x14C6A02
        55: data_o = width_p ' (28'b0001___100___011000_1_1010___1000000010); // 0x18C6A02
                                 // #SEND  en   id=25 d l=10   {reset, cord}
        56: data_o = width_p ' (28'b0001___010___011001_1_1010___1000000011); // 0x14CEA03
        57: data_o = width_p ' (28'b0001___100___011001_1_1010___1000000011); // 0x18CEA03
                                 // #SEND  en   id=26 d l=10   {reset, cord}
        58: data_o = width_p ' (28'b0001___010___011010_1_1010___1000000100); // 0x14D6A04
        59: data_o = width_p ' (28'b0001___100___011010_1_1010___1000000100); // 0x18D6A04
                                 // #SEND  en   id=27 d l=10   {reset, cord}
        60: data_o = width_p ' (28'b0001___010___011011_1_1010___1000000101); // 0x14DEA05
        61: data_o = width_p ' (28'b0001___100___011011_1_1010___1000000101); // 0x18DEA05
                                 // #SEND  en   id=28 d l=10   {reset, cord}
        62: data_o = width_p ' (28'b0001___010___011100_1_1010___1000000110); // 0x14E6A06
        63: data_o = width_p ' (28'b0001___100___011100_1_1010___1000000110); // 0x18E6A06
                                 // #SEND  en   id=29 d l=10   {reset, cord}
        64: data_o = width_p ' (28'b0001___010___011101_1_1010___1000000111); // 0x14EEA07
        65: data_o = width_p ' (28'b0001___100___011101_1_1010___1000000111); // 0x18EEA07
                                 // #SEND  en   id=30 d l=10   {reset, cord}
        66: data_o = width_p ' (28'b0001___010___011110_1_1010___1000001000); // 0x14F6A08
        67: data_o = width_p ' (28'b0001___100___011110_1_1010___1000001000); // 0x18F6A08
                                 // #SEND  en   id=31 d l=10   {reset, cord}
        68: data_o = width_p ' (28'b0001___010___011111_1_1010___1000001001); // 0x14FEA09
        69: data_o = width_p ' (28'b0001___100___011111_1_1010___1000001001); // 0x18FEA09
                                 // #SEND  en   id=32 d l=10   {reset, cord}
        70: data_o = width_p ' (28'b0001___010___100000_1_1010___1000001010); // 0x1506A0A
        71: data_o = width_p ' (28'b0001___100___100000_1_1010___1000001010); // 0x1906A0A
                                 // #SEND  en   id=33 d l=10   {reset, cord}
        72: data_o = width_p ' (28'b0001___010___100001_1_1010___1000001011); // 0x150EA0B
        73: data_o = width_p ' (28'b0001___100___100001_1_1010___1000001011); // 0x190EA0B
                                 // # Reset GW network_b, set cord to 32
                                 // #SEND  en   id=22 d l=10   {reset, cord}
        74: data_o = width_p ' (28'b0001___001___010110_1_1010___1000100000); // 0x12B6A20
                                 // #SEND  en   id=26 d l=10   {reset, cord}
        75: data_o = width_p ' (28'b0001___001___011010_1_1010___1000100000); // 0x12D6A20
                                 // # Reset ASIC Manycore, set dest cord to 8
                                 // #SEND  en   id=19 d l=5   {reset, cord}
        76: data_o = width_p ' (28'b0001___010___010011_1_0101___0000011000); // 0x149D418
        77: data_o = width_p ' (28'b0001___100___010011_1_0101___0000011000); // 0x189D418
                                 // # Reset GW Manycore, set dest cord to 0
                                 // #SEND  en   id=19 d l=5   {reset, cord}
        78: data_o = width_p ' (28'b0001___001___010011_1_0101___0000010000); // 0x129D410
                                 // #SEND  en   id=23 d l=5   {reset, cord}
        79: data_o = width_p ' (28'b0001___001___010111_1_0101___0000010000); // 0x12BD410
                                 // # Reset ASIC Vcache, set dest cord to 32
                                 // #SEND  en   id=20 d l=10   {reset, cord}
        80: data_o = width_p ' (28'b0001___010___010100_1_1010___1000100000); // 0x14A6A20
        81: data_o = width_p ' (28'b0001___100___010100_1_1010___1000100000); // 0x18A6A20
                                 // # Reset GW Vcache, set dest cord to 0
                                 // #SEND  en   id=20 d l=10   {reset, cord}
        82: data_o = width_p ' (28'b0001___001___010100_1_1010___1000000000); // 0x12A6A00
                                 // #SEND  en   id=24 d l=10   {reset, cord}
        83: data_o = width_p ' (28'b0001___001___011000_1_1010___1000000000); // 0x12C6A00
                                 // ### STEP 2: Perform async token resets
                                 // # Async token reset for IC1 GW Prev IO Link
                                 // #SEND  en   id=13 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        84: data_o = width_p ' (28'b0001___011___001101_1_0011___0000000111); // 0x166CC07
        85: data_o = width_p ' (28'b0001___011___001101_1_0011___0000000110); // 0x166CC06
                                 // # Async token reset for IC0 IC1 Next IO Link
                                 // #SEND  en   id=16 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        86: data_o = width_p ' (28'b0001___110___010000_1_0011___0000000111); // 0x1C84C07
        87: data_o = width_p ' (28'b0001___110___010000_1_0011___0000000110); // 0x1C84C06
                                 // ### STEP 3: De-assert Upstream IO Links reset
                                 // # De-assert upstream reset for IC0 IC1 Prev IO Link
                                 // #SEND  en   id=13 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        88: data_o = width_p ' (28'b0001___001___001101_1_0011___0000000010); // 0x126CC02
                                 // # De-assert upstream reset for GW IC0 Next IO Link
                                 // #SEND  en   id=16 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        89: data_o = width_p ' (28'b0001___010___010000_1_0011___0000000010); // 0x1484C02
                                 // ### STEP 4: De-assert Downstream IO Links reset
                                 // # De-assert downstream reset for IC0 IC1 Prev IO Link
                                 // #SEND  en   id=13 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        90: data_o = width_p ' (28'b0001___001___001101_1_0011___0000000000); // 0x126CC00
                                 // # De-assert downstream reset for GW IC0 Next IO Link
                                 // #SEND  en   id=16 d l=3   {up_link_reset, down_link_reset, async_token_reset}
        91: data_o = width_p ' (28'b0001___010___010000_1_0011___0000000000); // 0x1484C00
                                 // ### STEP 5/6: De-assert Upstream/Downstream CORE Links reset
                                 // # De-assert upstream/downstream reset for IC0 IC1 Prev CORE Link
                                 // #SEND  en   id=14 d l=2   {up_link_reset, down_link_reset}
        92: data_o = width_p ' (28'b0001___001___001110_1_0010___0000000000); // 0x1274800
                                 // # De-assert upstream/downstream reset for GW IC0 Next CORE Link
                                 // #SEND  en   id=17 d l=2   {up_link_reset, down_link_reset}
        93: data_o = width_p ' (28'b0001___010___010001_1_0010___0000000000); // 0x148C800
                                 // ### STEP 7: De-assert CT reset and fifo reset
                                 // # De-assert reset and fifo_reset for IC0 IC1 Prev CT CORE Control
                                 // #SEND  en   id=15 d l=2   {reset, fifo_reset}
        94: data_o = width_p ' (28'b0001___001___001111_1_0010___0000000000); // 0x127C800
                                 // # De-assert reset and fifo_reset for GW IC0 Next CT CORE Control
                                 // #SEND  en   id=18 d l=2   {reset, fifo_reset}
        95: data_o = width_p ' (28'b0001___010___010010_1_0010___0000000000); // 0x1494800
                                 // ### STEP 8: De-assert Router reset
                                 // # De-assert reset for ASIC network_a
                                 // #SEND  en   id=21 d l=5   {reset, cord}
        96: data_o = width_p ' (28'b0001___010___010101_1_0101___0000000000); // 0x14AD400
        97: data_o = width_p ' (28'b0001___100___010101_1_0101___0000000000); // 0x18AD400
                                 // # De-assert reset for GW network_a
                                 // #SEND  en   id=21 d l=5   {reset, cord}
        98: data_o = width_p ' (28'b0001___001___010101_1_0101___0000001000); // 0x12AD408
                                 // #SEND  en   id=25 d l=5   {reset, cord}
        99: data_o = width_p ' (28'b0001___001___011001_1_0101___0000001000); // 0x12CD408
                                 // # De-assert reset for ASIC network_b
                                 // #SEND  en   id=22 d l=10   {reset, cord}
       100: data_o = width_p ' (28'b0001___010___010110_1_1010___0000000000); // 0x14B6800
       101: data_o = width_p ' (28'b0001___100___010110_1_1010___0000000000); // 0x18B6800
                                 // #SEND  en   id=23 d l=10   {reset, cord}
       102: data_o = width_p ' (28'b0001___010___010111_1_1010___0000000001); // 0x14BE801
       103: data_o = width_p ' (28'b0001___100___010111_1_1010___0000000001); // 0x18BE801
                                 // #SEND  en   id=24 d l=10   {reset, cord}
       104: data_o = width_p ' (28'b0001___010___011000_1_1010___0000000010); // 0x14C6802
       105: data_o = width_p ' (28'b0001___100___011000_1_1010___0000000010); // 0x18C6802
                                 // #SEND  en   id=25 d l=10   {reset, cord}
       106: data_o = width_p ' (28'b0001___010___011001_1_1010___0000000011); // 0x14CE803
       107: data_o = width_p ' (28'b0001___100___011001_1_1010___0000000011); // 0x18CE803
                                 // #SEND  en   id=26 d l=10   {reset, cord}
       108: data_o = width_p ' (28'b0001___010___011010_1_1010___0000000100); // 0x14D6804
       109: data_o = width_p ' (28'b0001___100___011010_1_1010___0000000100); // 0x18D6804
                                 // #SEND  en   id=27 d l=10   {reset, cord}
       110: data_o = width_p ' (28'b0001___010___011011_1_1010___0000000101); // 0x14DE805
       111: data_o = width_p ' (28'b0001___100___011011_1_1010___0000000101); // 0x18DE805
                                 // #SEND  en   id=28 d l=10   {reset, cord}
       112: data_o = width_p ' (28'b0001___010___011100_1_1010___0000000110); // 0x14E6806
       113: data_o = width_p ' (28'b0001___100___011100_1_1010___0000000110); // 0x18E6806
                                 // #SEND  en   id=29 d l=10   {reset, cord}
       114: data_o = width_p ' (28'b0001___010___011101_1_1010___0000000111); // 0x14EE807
       115: data_o = width_p ' (28'b0001___100___011101_1_1010___0000000111); // 0x18EE807
                                 // #SEND  en   id=30 d l=10   {reset, cord}
       116: data_o = width_p ' (28'b0001___010___011110_1_1010___0000001000); // 0x14F6808
       117: data_o = width_p ' (28'b0001___100___011110_1_1010___0000001000); // 0x18F6808
                                 // #SEND  en   id=31 d l=10   {reset, cord}
       118: data_o = width_p ' (28'b0001___010___011111_1_1010___0000001001); // 0x14FE809
       119: data_o = width_p ' (28'b0001___100___011111_1_1010___0000001001); // 0x18FE809
                                 // #SEND  en   id=32 d l=10   {reset, cord}
       120: data_o = width_p ' (28'b0001___010___100000_1_1010___0000001010); // 0x150680A
       121: data_o = width_p ' (28'b0001___100___100000_1_1010___0000001010); // 0x190680A
                                 // #SEND  en   id=33 d l=10   {reset, cord}
       122: data_o = width_p ' (28'b0001___010___100001_1_1010___0000001011); // 0x150E80B
       123: data_o = width_p ' (28'b0001___100___100001_1_1010___0000001011); // 0x190E80B
                                 // # De-assert reset for GW network_b
                                 // #SEND  en   id=22 d l=10   {reset, cord}
       124: data_o = width_p ' (28'b0001___001___010110_1_1010___0000100000); // 0x12B6820
                                 // #SEND  en   id=26 d l=10   {reset, cord}
       125: data_o = width_p ' (28'b0001___001___011010_1_1010___0000100000); // 0x12D6820
                                 // ### STEP 9: De-assert Manycore reset
                                 // # De-assert reset for ASIC Manycore
                                 // #SEND  en   id=19 d l=5   {reset, cord}
       126: data_o = width_p ' (28'b0001___010___010011_1_0101___0000001000); // 0x149D408
       127: data_o = width_p ' (28'b0001___100___010011_1_0101___0000001000); // 0x189D408
                                 // # De-assert reset for GW Manycore
                                 // #SEND  en   id=19 d l=5   {reset, cord}
       128: data_o = width_p ' (28'b0001___001___010011_1_0101___0000000000); // 0x129D400
                                 // #SEND  en   id=23 d l=5   {reset, cord}
       129: data_o = width_p ' (28'b0001___001___010111_1_0101___0000000000); // 0x12BD400
                                 // # De-assert reset for ASIC Vcache
                                 // #SEND  en   id=20 d l=10   {reset, cord}
       130: data_o = width_p ' (28'b0001___010___010100_1_1010___0000100000); // 0x14A6820
       131: data_o = width_p ' (28'b0001___100___010100_1_1010___0000100000); // 0x18A6820
                                 // # De-assert reset for GW Vcache
                                 // #SEND  en   id=20 d l=10   {reset, cord}
       132: data_o = width_p ' (28'b0001___001___010100_1_1010___0000000000); // 0x12A6800
                                 // #SEND  en   id=24 d l=10   {reset, cord}
       133: data_o = width_p ' (28'b0001___001___011000_1_1010___0000000000); // 0x12C6800
                                 // # Wait ~64 cycles for TAG traffic to propagate to destination
       134: data_o = width_p ' (28'b0110___000000000000000001000000); // 0x6000040
       135: data_o = width_p ' (28'b0101___000000000000000000000000); // 0x5000000
                                 // ################################################################################
                                 // #
                                 // # Done!
                                 // #
                                 // # Configuration is complete and we are out of reset. We should indicate we are
                                 // # done to allow the next part of the testbench to come alive.
                                 // # Assert done_o
       136: data_o = width_p ' (28'b0011___000000000000000000000000); // 0x3000000
   default: data_o = 'X;
endcase
endmodule
